import React, { useState, useEffect } from 'react';
import { 
  FileText, 
  Download, 
  Users, 
  Clock, 
  MessageSquare, 
  CheckCircle,
  User,
  Calendar,
  Target,
  ListChecks,
  Brain,
  X
} from 'lucide-react';
import { meetingAPI } from '../../services/api';

const TranscriptViewer = ({ meetingId, onClose }) => {
  const [transcript, setTranscript] = useState(null);
  const [meeting, setMeeting] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('transcript'); // 'transcript', 'summary', 'stats'
  const [isGeneratingSummary, setIsGeneratingSummary] = useState(false);

  useEffect(() => {
    loadTranscript();
  }, [meetingId]);

  const loadTranscript = async () => {
    try {
      setIsLoading(true);
      setError(null);
      
      const response = await meetingAPI.getMeetingTranscript(meetingId);
      setMeeting(response.meeting);
      setTranscript(response.transcript);
    } catch (error) {
      console.error('Failed to load transcript:', error);
      setError('Failed to load meeting transcript. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const generateSummary = async () => {
    try {
      setIsGeneratingSummary(true);
      const response = await meetingAPI.generateTranscriptSummary(meetingId);
      setTranscript(prev => ({
        ...prev,
        summary: response.summary
      }));
    } catch (error) {
      console.error('Failed to generate summary:', error);
      setError('Failed to generate AI summary. Please try again.');
    } finally {
      setIsGeneratingSummary(false);
    }
  };

  const downloadTranscript = () => {
    if (!transcript?.finalTranscript) return;

    const content = `Meeting Transcript
Meeting with: ${meeting?.client?.firstName} ${meeting?.client?.lastName}
Date: ${new Date(meeting?.scheduledAt).toLocaleString()}
Duration: ${meeting?.duration} minutes

${transcript.finalTranscript}

Generated by Richie AI Meeting System`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `meeting-transcript-${meetingId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = Math.floor(seconds % 60);
    return `${minutes}m ${remainingSeconds}s`;
  };

  const formatTimestamp = (timestamp) => {
    return new Date(timestamp).toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };

  const renderTranscriptContent = () => {
    if (!transcript?.realTimeMessages?.length && !transcript?.finalTranscript) {
      return (
        <div className="text-center py-12">
          <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600">No transcript available for this meeting</p>
          <p className="text-sm text-gray-500 mt-1">
            Transcription may not have been enabled during the meeting
          </p>
        </div>
      );
    }

    if (transcript.finalTranscript) {
      // Display formatted final transcript
      const lines = transcript.finalTranscript.split('\n').filter(line => line.trim());
      
      return (
        <div className="space-y-4">
          {lines.map((line, index) => {
            if (line.includes(':')) {
              const [speaker, ...textParts] = line.split(':');
              const text = textParts.join(':').trim();
              
              return (
                <div key={index} className="border-l-2 border-blue-200 pl-4">
                  <div className="font-medium text-blue-900 text-sm mb-1">
                    {speaker.trim()}
                  </div>
                  <p className="text-gray-800">{text}</p>
                </div>
              );
            }
            
            return (
              <p key={index} className="text-gray-800">
                {line}
              </p>
            );
          })}
        </div>
      );
    }

    // Display real-time messages if no final transcript
    const finalMessages = transcript.realTimeMessages
      .filter(msg => msg.isFinal)
      .sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));

    return (
      <div className="space-y-4">
        {finalMessages.map((message, index) => (
          <div key={index} className="border-l-2 border-blue-200 pl-4">
            <div className="flex items-center gap-2 text-sm text-gray-600 mb-1">
              <span className="font-medium text-blue-900">
                {message.participantName}
              </span>
              <span className="text-xs">
                {formatTimestamp(message.timestamp)}
              </span>
            </div>
            <p className="text-gray-800">{message.text}</p>
          </div>
        ))}
      </div>
    );
  };

  const renderSummaryContent = () => {
    if (!transcript?.summary) {
      return (
        <div className="text-center py-12">
          <div className="mb-6">
            <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600 mb-4">No AI summary available</p>
            {transcript?.finalTranscript && (
              <button
                onClick={generateSummary}
                disabled={isGeneratingSummary}
                className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 flex items-center gap-2 mx-auto"
              >
                {isGeneratingSummary ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    <Brain className="h-4 w-4" />
                    Generate AI Summary
                  </>
                )}
              </button>
            )}
          </div>
        </div>
      );
    }

    const { summary } = transcript;

    return (
      <div className="space-y-6">
        {/* Key Points */}
        {summary.keyPoints?.length > 0 && (
          <div>
            <h3 className="flex items-center gap-2 text-lg font-medium text-gray-900 mb-3">
              <Target className="h-5 w-5 text-blue-600" />
              Key Discussion Points
            </h3>
            <ul className="space-y-2">
              {summary.keyPoints.map((point, index) => (
                <li key={index} className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600 mt-1 flex-shrink-0" />
                  <span className="text-gray-800">{point}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Action Items */}
        {summary.actionItems?.length > 0 && (
          <div>
            <h3 className="flex items-center gap-2 text-lg font-medium text-gray-900 mb-3">
              <ListChecks className="h-5 w-5 text-orange-600" />
              Action Items
            </h3>
            <ul className="space-y-2">
              {summary.actionItems.map((item, index) => (
                <li key={index} className="flex items-start gap-2">
                  <div className="w-4 h-4 border-2 border-orange-400 rounded mt-1 flex-shrink-0"></div>
                  <span className="text-gray-800">{item}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Decisions */}
        {summary.decisions?.length > 0 && (
          <div>
            <h3 className="flex items-center gap-2 text-lg font-medium text-gray-900 mb-3">
              <CheckCircle className="h-5 w-5 text-green-600" />
              Decisions Made
            </h3>
            <ul className="space-y-2">
              {summary.decisions.map((decision, index) => (
                <li key={index} className="flex items-start gap-2">
                  <CheckCircle className="h-4 w-4 text-green-600 mt-1 flex-shrink-0" />
                  <span className="text-gray-800">{decision}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* Summary metadata */}
        {summary.aiGenerated && (
          <div className="text-sm text-gray-500 border-t pt-4">
            <p>AI-generated summary â€¢ {new Date(summary.generatedAt).toLocaleString()}</p>
          </div>
        )}
      </div>
    );
  };

  const renderStatsContent = () => {
    if (!transcript?.speakers?.length) {
      return (
        <div className="text-center py-12">
          <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600">No speaker statistics available</p>
        </div>
      );
    }

    const totalMessages = transcript.realTimeMessages?.length || 0;
    const totalSpeakingTime = transcript.speakers.reduce((acc, speaker) => acc + speaker.totalSpeakingTime, 0);

    return (
      <div className="space-y-6">
        {/* Overall Stats */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-blue-50 p-4 rounded-lg text-center">
            <MessageSquare className="h-8 w-8 text-blue-600 mx-auto mb-2" />
            <div className="text-2xl font-bold text-blue-900">{totalMessages}</div>
            <div className="text-sm text-blue-700">Total Messages</div>
          </div>
          
          <div className="bg-green-50 p-4 rounded-lg text-center">
            <Users className="h-8 w-8 text-green-600 mx-auto mb-2" />
            <div className="text-2xl font-bold text-green-900">{transcript.speakers.length}</div>
            <div className="text-sm text-green-700">Participants</div>
          </div>
          
          <div className="bg-purple-50 p-4 rounded-lg text-center">
            <Clock className="h-8 w-8 text-purple-600 mx-auto mb-2" />
            <div className="text-2xl font-bold text-purple-900">{formatDuration(totalSpeakingTime)}</div>
            <div className="text-sm text-purple-700">Speaking Time</div>
          </div>
          
          <div className="bg-orange-50 p-4 rounded-lg text-center">
            <FileText className="h-8 w-8 text-orange-600 mx-auto mb-2" />
            <div className="text-2xl font-bold text-orange-900">
              {transcript.status === 'completed' ? 'Complete' : 'Partial'}
            </div>
            <div className="text-sm text-orange-700">Transcript</div>
          </div>
        </div>

        {/* Speaker Breakdown */}
        <div>
          <h3 className="text-lg font-medium text-gray-900 mb-4">Speaker Breakdown</h3>
          <div className="space-y-3">
            {transcript.speakers.map((speaker, index) => {
              const speakingPercentage = totalSpeakingTime > 0 
                ? (speaker.totalSpeakingTime / totalSpeakingTime * 100).toFixed(1)
                : 0;

              return (
                <div key={index} className="border rounded-lg p-4">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <User className="h-4 w-4 text-gray-500" />
                      <span className="font-medium">{speaker.participantName}</span>
                    </div>
                    <span className="text-sm text-gray-600">{speakingPercentage}% of conversation</span>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">Messages: </span>
                      <span className="font-medium">{speaker.messageCount}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">Speaking Time: </span>
                      <span className="font-medium">{formatDuration(speaker.totalSpeakingTime)}</span>
                    </div>
                  </div>
                  
                  <div className="mt-2">
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className="bg-blue-600 h-2 rounded-full" 
                        style={{ width: `${speakingPercentage}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    );
  };

  if (isLoading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading transcript...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="p-6 border-b border-gray-200">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
                <FileText className="h-6 w-6 text-blue-600" />
                Meeting Transcript
              </h2>
              {meeting && (
                <div className="flex items-center gap-4 text-sm text-gray-600 mt-2">
                  <div className="flex items-center gap-1">
                    <User className="h-4 w-4" />
                    {meeting.client?.firstName} {meeting.client?.lastName}
                  </div>
                  <div className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    {new Date(meeting.scheduledAt).toLocaleDateString()}
                  </div>
                  {meeting.duration > 0 && (
                    <div className="flex items-center gap-1">
                      <Clock className="h-4 w-4" />
                      {meeting.duration} minutes
                    </div>
                  )}
                </div>
              )}
            </div>
            
            <div className="flex items-center gap-2">
              <button
                onClick={downloadTranscript}
                disabled={!transcript?.finalTranscript}
                className="px-3 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-400 flex items-center gap-2"
                title="Download transcript"
              >
                <Download className="h-4 w-4" />
                Download
              </button>
              
              <button
                onClick={onClose}
                className="p-2 text-gray-500 hover:text-gray-700"
              >
                <X className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Error Display */}
        {error && (
          <div className="p-4 bg-red-50 border-l-4 border-red-400">
            <p className="text-red-700 text-sm">{error}</p>
          </div>
        )}

        {/* Tab Navigation */}
        <div className="px-6 pt-4">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8">
              <button
                onClick={() => setActiveTab('transcript')}
                className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'transcript'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                Transcript
              </button>
              <button
                onClick={() => setActiveTab('summary')}
                className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'summary'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                AI Summary
              </button>
              <button
                onClick={() => setActiveTab('stats')}
                className={`py-2 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === 'stats'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700'
                }`}
              >
                Statistics
              </button>
            </nav>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-auto p-6">
          {activeTab === 'transcript' && renderTranscriptContent()}
          {activeTab === 'summary' && renderSummaryContent()}
          {activeTab === 'stats' && renderStatsContent()}
        </div>
      </div>
    </div>
  );
};

export default TranscriptViewer;